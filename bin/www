#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('locationpicker-server:server');

const redis = require('../util/redis/redis');
const friendsDBNeo4j = require('../util/neo4j/friendsDBNeo4j')

var http = require('http');
//const { Server } = require('mysql2/typings/mysql/lib/Server');

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const socketIO = require('socket.io')
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, '192.168.0.193')
server.on('error', onError);
server.on('listening', onListening);

const FriendShipsService = new friendsDBNeo4j.Neo4j_FriendShipsService();

const io = socketIO(server)
io.on('connection', (socket) => {
  console.log('有一個客戶端連接了');

  // 在這裡可以註冊各種事件和處理程序
  socket.on('private message', (msg, targetUserID) => {
    // 檢查目標使用者是否存在並且是有效的 Socket ID
    if (users[targetUserID] && io.sockets.sockets[targetUserID]) {
      // 發送私人訊息給目標使用者
      io.to(targetUserID).emit('private message', { message: msg, senderID: socket.id });
    } else {
      // 如果目標使用者不存在或是無效的 Socket ID，回傳錯誤訊息
      socket.emit('private message', { error: '目標使用者不存在或是無效的 Socket ID' });
    }
  });

  socket.on('disconnect', () => {
      console.log('客戶端斷開連接');
  });
});


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  console.log(addr)
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

module.exports = server
